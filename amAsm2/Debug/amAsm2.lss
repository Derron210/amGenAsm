
AVRASM ver. 2.1.57  C:\Users\Derron\Documents\amGenAsm\amAsm2\amAsm2.asm Tue Aug 16 02:16:37 2016

[builtin](2): Including file 'C:\Users\Derron\Documents\amGenAsm\amAsm2\m8def.inc'
C:\Users\Derron\Documents\amGenAsm\amAsm2\amAsm2.asm(1): Including file 'C:\Users\Derron\Documents\amGenAsm\amAsm2\m8def.inc'
C:\Users\Derron\Documents\amGenAsm\amAsm2\amAsm2.asm(80): Including file 'C:\Users\Derron\Documents\amGenAsm\amAsm2\dmodes.asm'
C:\Users\Derron\Documents\amGenAsm\amAsm2\amAsm2.asm(82): Including file 'C:\Users\Derron\Documents\amGenAsm\amAsm2\uInterrupts.asm'
                 
                 .include "m8def.inc"
                 
                 ;***** Created: 2005-01-11 10:31 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2005-01-11
                 ;* Version           : 2.14
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #define _M8DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega8
                 #pragma AVRPART ADMIN PART_NAME ATmega8
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPH	= 0x3e
                 .equ	SPL	= 0x3d
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1H	= 0x2d
                 .equ	TCNT1L	= 0x2c
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1BH	= 0x29
                 .equ	OCR1BL	= 0x28
                 .equ	ICR1H	= 0x27
                 .equ	ICR1L	= 0x26
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARH	= 0x1f
                 .equ	EEARL	= 0x1e
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 
                 ; TCCR0 - Timer/Counter0 Control Register
                 .equ	CS00	= 0	; Clock Select0 bit 0
                 .equ	CS01	= 1	; Clock Select0 bit 1
                 .equ	CS02	= 2	; Clock Select0 bit 2
                 
                 ; TCNT0 - Timer Counter 0
                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PUD	= 2	; Pull-up Disable
                 .equ	ADHSM	= 4	; ADC High Speed Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADFR	= 5	; ADC  Free Running Select
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	WTDON	= 6	; Enable watchdog
                 .equ	RSTDISBL	= 7	; Disable reset
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 ;***** Created: 2005-01-11 10:31 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2005-01-11
                 ;* Version           : 2.14
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 ;Таблица векторов прерываний
                 ;***********************************
000000 c02b      .org 0x000	rjmp START
000003 c09d      .org 0x003	rjmp TIMER_2_COMP
000006 c068      .org 06		rjmp TIMER_1_COMP_A
000007 c091      .org 0x007	rjmp TIMER_1_COMP_B
000008 c096      .org 0x008	rjmp TIMER_1_OVF
00000b c0a3      .org 0x00b	rjmp USART_RX
                 ;***********************************
                 
                 .cseg
                 
                 ;Массив значений синусоиды
                 ;***********************************
                 SINAR:
00000c 0c00
00000d 2519
00000e 3c31
00000f 5147
000010 625a      .db 0, 12, 25, 37, 49, 60, 71, 81, 90, 98 
000011 706a
000012 7a75
000013 7e7d
000014 7e7e      .db  106, 112, 117, 122, 125, 126, 126 , 126
000015 7a7d
000016 7075
000017 626a
000018 515a      .db  125, 122, 117, 112, 106, 98, 90, 81 
000019 3c47
00001a 2531
00001b 0c19
00001c f400      .db  71, 60, 49, 37, 25, 12, 0, -12
00001d dbe7
00001e c4cf
00001f afb9
000020 9ea6      .db -25, -37, -49, -60, -71, -81, -90, -98
000021 9096
000022 868b
000023 8283      .db -106, -112, -117, -122, -125, -126  
000024 8281
000025 8683
000026 908b
000027 9e96      .db -127,-126, -125, -122, -117, -112, -106, -98
000028 afa6
000029 c4b9
00002a dbcf
00002b f4e7      .db -90, -81, -71, -60, -49, -37, -25, -12
                 ;***********************************
                 
                 ;Константы
                 ;***********************************
                 .equ	BUFHEADER		=	150			;Заголовок пакета UART
                 .equ   MODE_INTGEN		=	7			;НОМЕР бита регистра MOEDER, 0-внешний сигнал, 1- внутрений
                 .equ   ARRAY_SIZE		=	64			;Размер массива значений синусоиды
                 ;***********************************
                 
                 ;Объявления регистров
                 ;***********************************
                 .def	NULL  =	R2						;Константа равная 0, нужна для того, чтобы не использовать РОН для арифм. операций
                 .def	T1NVR = R3						;2 регистра, содержажие частоту таймеров 1 и 2, которая установиться во время следующего прерывания 
                 .def	T2NVR = R4
                 .def	MSIGR = R5						;Знач. внутреннего инф. сигнала
                 .def	CARAR = R6						;Регистр содержит амлпитуду несущей - [0; 127] 0 - макс. значение
                 .def	SIGAR = R7
                 .def	STATR = R15						;Выбор источника информационного сигнала
                 .def	GENI1 = R16						;Три регистра общего назначения для ПРЕРЫВАНИЙ
                 .def	GENI2 = R17
                 .def	GENI3 = R18
                 .def	BUFPR = R19						;Указатель буфера uart
                 .def	GENR1 =	R20						;Три регистра общего назначения для ПРОГРАММЫ
                 .def	GENR2 =	R21
                 .def	GENR3 = R22
                 ;***********************************
                 
                 START:
00002c 2422      	clr		NULL
                 	
                 	;Настройка стека
00002d e54f      	ldi		GENR1,		low(RAMEND)			; Загрузка в регистр GENR1 адреса верхней границы ОЗУ
00002e bf4d      	out		SPL,		GENR1				;Копирование значения из GENR1 в регистр указателя стека SPL
00002f e044      	ldi		GENR1,		high(RAMEND)
000030 bf4e      	out		SPH,		GENR1
                 
000031 d0d5      	rcall	LOAD_ARRAY		;Грузим значения синусоиды в ОЗУ
                 
                 	;Настройка USART
000032 e647      	ldi		GENR1,		103
000033 e050      	ldi		GENR2,		0
000034 bd50      	out		UBRRH,		GENR2
000035 b949      	out		UBRRL,		GENR1
000036 e948      	ldi		GENR1,		(1<<RXEN)|(1<<TXEN) | (1<<RXCIE)
000037 b94a      	out		UCSRB,		GENR1
000038 e84e      	ldi		GENR1,		(1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
000039 bd40      	out		UCSRC,		GENR1
                 
                 	;Настройка PORTB
00003a e35f      	ldi		GENR2,	0b00111111			
00003b bb57      	out		DDRB,	GENR2
                 
00003c c000      	rjmp	dmode1
                 
                 .include "dmodes.asm"
                 
                 ;//*************************************************************************
                 ;//Генерация АМ. Вместо АЦП используется значение, полученной с ПК в R18
                 ;//В GENR1 - 0 если источник внешний, не 0 если внутренний
                 ;//*************************************************************************
                 dmode1:
00003d d0d9      	rcall clearstack
                 
                 	;Настраиваем регистр START
00003e 24ff      	clr		STATR
00003f 7041      	andi	GENR1,		1
000040 2af4      	or		STATR,		GENR1		;Режим инф. сигнала внешний/внутренний
000041 e041      	ldi		GENR1,		1
000042 0f44      	lsl		GENR1
000043 2af4      	or		STATR,		GENR1		;Номер режима
                 
000044 e7e4      	ldi		ZL,	LOW(AM_GEN)
000045 e0f0      	ldi		ZH,	HIGH(AM_GEN)
000046 d0e0      	rcall   setTimer1COMPAVect
                 
                 	;Настройка таймеров
000047 e050      	ldi		GENR2,	0b0000000
000048 bf53      	out		TCCR0,	GENR2
                 
000049 ec58      	ldi		GENR2,	200
00004a bd5a      	out		OCR1AL,	GENR2
                 
00004b e050      	ldi		GENR2,	(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<FOC1A) | (0<<FOC1B) | (0<<WGM11) | (0<<WGM10)
00004c bd5f      	out		TCCR1A,	GENR2
                 
00004d e059      	ldi		GENR2,	(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10) 
00004e bd5e      	out		TCCR1B,	GENR2
                 
00004f e150      	ldi		GENR2, (1<<OCIE1A)
000050 bf59      	out		TIMSK,	GENR2
000051 9478      	sei;
                 
000052 fef0      	sbrs	STATR,		0		;Если первый бит START - 1, то  запускаем таймер для генерации внутр. сигнала
000053 c007      	rjmp	dloop1
                 
000054 e04b      	ldi		GENR1,		(1<<WGM21) | (1<<CS21) | (1<<CS20)
000055 bd45      	out		TCCR2,		GENR1
                 
000056 e342      	ldi		GENR1,		50
000057 bd43      	out		OCR2,		GENR1
000058 b749      	in		GENR1,		TIMSK
000059 6840      	ori		GENR1,		(1<<OCIE2)
00005a bf49      	out		TIMSK,		GENR1
                 
                 dloop1:
                 
00005b fcf0      	sbrc	STATR,		0
00005c cffe      	rjmp	dloop1
                 	
                 	;Если сигнал внешний, то считываем его значение с АЦП
00005d e645      	ldi		GENR1,		(1<<REFS0) | (1<<ADLAR) | (1<<MUX2) | (1<<MUX0)
00005e d0c2      	rcall	getADCSample
00005f b055      	in		MSIGR,		ADCH	
                 
000060 cffa      rjmp dloop1
                 
                 
                 dmode2:
000061 d0b5      	rcall	clearstack
                 
000062 e34f      	ldi		GENR1,	0b00111111			;Настройка PORTB
000063 bb47      	out		DDRB,	GENR1
                 
000064 e051      	ldi		GENR2,	1<<WGM10
000065 bd5f      	out		TCCR1A,	GENR2
                 
000066 e059      	ldi		GENR2,	(1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10) 
000067 bd5e      	out		TCCR1B,	GENR2
                 
000068 e05c      	ldi		GENR2, (1<<OCIE1B) | (1<<TOIE1)
000069 bf59      	out		TIMSK,	GENR2
                 
00006a 9478      	sei
                 dloop2:
00006b e645      	ldi		GENR1,		(1<<REFS0) | (1<<ADLAR) | (1<<MUX2) | (1<<MUX0)	
00006c d0b4      	rcall	getADCSample
00006d b055      	in		MSIGR,		ADCH
                 
00006e cffc      rjmp dloop2
                 
                 
                 
                 
                 
                 
                 .include "uInterrupts.asm"
                 
00006f 91e0 0064 	lds		ZL,		TIMER_1_COMP_A_vect
000071 91f0 0065 	lds		ZH,		TIMER_1_COMP_A_vect+1
000073 9409      ijmp
                 
                 ;*************************************************************************
                 ;	Таймер 1 считывет значение из таблицы синусов
                 ;*************************************************************************
                 AM_GEN:				;Обработка прерывания таймера
000074 bc3a      	out		OCR1AL,	T1NVR
000075 73cf      	andi	YL,		ARRAY_SIZE-1				
000076 9109      	ld		GENI1,	Y+				
                 
000077 2d15      	mov		GENI2,	MSIGR												;Внешний сигнал считывается в цикле с АЦП или в другом прерывании если сигнал внутрений
                 
000078 0301      	mulsu   GENI1,	GENI2												;Перемножим значение инф. сигнала (беззнаковый) на значение несущей (знаковый)
                 
000079 2d11      	mov		GENI2,	R1
00007a 2d06      	mov		GENI1,	CARAR
00007b 0398      	fmulsu	GENI2,	GENI1
00007c 2d01      	mov		GENI1,	R1													;Приведем к виду [0..255]
00007d c014      rjmp	int_tm1_exit
                 
                 
                 FM_GEN:
00007e 2d15      	mov		GENI2,	MSIGR
00007f e200      	ldi		GENI1,	0b00100000
000080 0318      	fmul	GENI2,	GENI1
000081 2d03      	mov		GENI1,	T1NVR
000082 0d01      	add		GENI1,	R1
                 
000083 bd0a      	out		OCR1AL,	GENI1
000084 73cf      	andi	YL,		ARRAY_SIZE-1				
000085 9109      	ld		GENI1,	Y+		
                 	;mov		GENI1,	CARAR
                 	;fmulsu	GENI2,	GENI1
                 	;mov		GENI1,	R1													;Приведем к виду [0..255]
000086 c00b      rjmp int_tm1_exit
                 
                 PM_GEN:
000087 bc3a      	out		OCR1AL,	T1NVR
                 
000088 91c0 0068 	lds		YL,		PM_POINTER
00008a 2f1c      	mov		GENI2,	YL
00008b 0dc5      	add		YL,		MSIGR
00008c 73cf      	andi	YL,		0b00111111
                 			
00008d 8108      	ld		GENI1,	Y		
00008e 9513      	inc		GENI2
00008f 731f      	andi	GENI2,	ARRAY_SIZE-1	
000090 9310 0068 	sts		PM_POINTER,	GENI2
                 pm_skip:
                 int_tm1_exit:
000092 e810      	ldi		GENI2,	128
000093 0f01      	add		GENI1,	GENI2
000094 9506      	lsr		GENI1
000095 9506      	lsr		GENI1														;Два раза поделим на 2, т.к. PB7 и PB6 не используются
000096 bb08      	out		PORTB,	GENI1
000097 bc2c      	out		TCNT1L,	NULL
000098 9518      reti
                 
                 
                 ;*************************************************************************
                 ;Исп. для дискретизатора
                 ;*************************************************************************
                 TIMER_1_COMP_B:
000099 bc3a      	out		OCR1AL,	T1NVR
00009a 2d05      	mov		GENI1,	MSIGR
00009b 9506      	lsr		GENI1
00009c 9506      	lsr		GENI1
00009d bb08      	out		PORTB,	GENI1
00009e 9518      reti
                 
                 ;*************************************************************************
                 ;Исп. для дискретизатора
                 ;*************************************************************************
                 TIMER_1_OVF:
00009f ba28      	out		PORTB,	NULL
0000a0 9518      reti
                 
                 ;*************************************************************************
                 ;	Таймер 2 Используется для генерации внутреннего инф. сигнала
                 ;*************************************************************************
                 TIMER_2_COMP:
0000a1 bc43      	out		OCR2,		T2NVR
0000a2 73af      	andi	XL,			ARRAY_SIZE-1
0000a3 910d      	ld		GENI1,		X+
0000a4 5800      	subi	GENI1,		128
0000a5 2d17      	mov		GENI2,		SIGAR
0000a6 0309      	fmul	GENI1,		GENI2
0000a7 2c51      	mov		MSIGR,		R1
0000a8 9518      reti
                 
                 
                 
                 _debug_uart:
0000a9 ec18      	ldi		GENI2,		200
0000aa 0f13      	add		GENI2,		BUFPR
0000ab 9b5d      	sbis	UCSRA,		UDRE
0000ac cffc      	rjmp	_debug_uart
0000ad b91c      	out		udr,		GENI2
0000ae 9508      ret
                 
                 
                 ; ;*************************************************************************
                 ; ;	На RX что-то приходит
                 ; ;*************************************************************************
                 ; ;//2 байт: [Команда; данные]
                 ; ;//			0 :n	- ничего не делать
                 ; ;//			11:x    - вернуть аналоговый режим
                 ; ;//			22:x	- цифровое управление, режим x;
                 ; ;//			30:x	- записать амплитуду несущей (CARAR) 
                 ; ;//			31:n    - записать частоту несущей (T1NVR (OCR1A))
                 ; ;//			32:n	- записать частоту инф.сигнала (T2NVR (OCR2))
                 
                 USART_RX:
                 USART_RECV1:							;//Считываем 1ый байт
0000af 9b5f      	sbis	UCSRA,		RXC
0000b0 cffe      	rjmp	USART_recv1
0000b1 b10c      	in		GENI1,		UDR
                 
0000b2 3030      	cpi		BUFPR,		0				;Если первый байт в пакете
0000b3 f441      	BRNE	SKTP
0000b4 3906      	cpi		GENI1,		BUFHEADER		;То он должен быть равен заголовку
0000b5 f009      	BREQ	buffst
0000b6 c041      	rjmp	NOT_HEADER
                 buffst:									;Запись в буфер заголовка
0000b7 9300 0060 	sts		uartBuf,	GENI1
0000b9 9533      	inc		BUFPR
0000ba e001      	ldi		GENI1,		1				;Код состояния для выхода
0000bb c03e      	rjmp	UR1_EXIT
                 
                 SKTP:
0000bc 93af      	push	Xl
0000bd 93bf      	push	Xh
0000be e6a0      	ldi		Xl,		low(uartBuf)
0000bf e0b0      	ldi		XH,		high(uartBuf)
0000c0 0fa3      	add		XL,		BUFPR				;Записываем на нужную позицию в буфере
0000c1 930c      	st		X,		GENI1
0000c2 91bf      	pop		Xh
0000c3 91af      	pop		XL
0000c4 9533      	inc     BUFPR
                 
0000c5 3034      	cpi		BUFPR,	4					;Когда буфер заполнен, обрабатываем
0000c6 f599      	brne	UR1_EXIT			
                 
0000c7 e030      	ldi		BUFPR,	0
                 
0000c8 9100 0061 	lds		GENI1,	uartBuf+1			;т.е ксорим первые три байта, результат должен равняться четвертому
0000ca 9110 0062 	lds		GENI2,	uartBuf+2
0000cc e926      	ldi		GENI3,	BUFHEADER
                 
0000cd 930f      	push	GENI1
0000ce 2702      	eor		GENI1,	GENI3
0000cf 2701      	eor		GENI1,	GENI2
                 
0000d0 9120 0063 	lds		GENI3,	uartBuf+3
                 
0000d2 1702      	cp		GENI1,	GENI3		;Проверяем контрольную сумму
0000d3 910f      	pop		GENI1
0000d4 f509      	BRNE	INCORRECT_CHECKSUM			;Если не совпала, выходим
                 
0000d5 300b      	cpi		GENI1,	11
0000d6 f0c1      	BREQ	setAmode
                 
0000d7 3106      	cpi		GENI1,	22
0000d8 f049      	BREQ	setdMOde
                 
0000d9 310e      	cpi		GENI1,	30
0000da f029      	BREQ	writeCARAR
                 
0000db 310f      	cpi		GENI1,	31
0000dc f0a9      	BREQ	writeT1NVR
                 
0000dd 3200      	cpi		GENI1,	32
0000de f0a9      	BREQ	writeT2NVR
                 
0000df c01a      	rjmp INT_PREP_EX
                 
                 writeCARAR:
0000e0 2e61      	mov		CARAR,	GENI2
0000e1 c018      	rjmp	INT_PREP_EX
                 
                 setdMode:
                 	;//Очищаем стек
0000e2 d01b      	rcall STOP_ALL
                 	
0000e3 e000      	ldi GENI1,	0
0000e4 bf0b      	out GICR,	GENI1
                 	
0000e5 e840      	ldi		GENR1,	0b10000000		;В GENR1 содержится инф. о источнике инф. сигнала
0000e6 2341      	and		GENR1,	GENI2			;Передаем ее с ПК в старшем бите команды
0000e7 771f      	andi	GENI2,	0b01111111	
                 
0000e8 3011      	cpi GENI2,	1
0000e9 f409      	BRNE dmd1
0000ea cf52      	rjmp dmode1
                 dmd1:
0000eb 3012      	cpi GENI2,2
0000ec f409      	BRNE dmd2
0000ed cf73      	rjmp dmode2
                 dmd2:
0000ee cf72      rjmp dmode2
                 
                 setAmode:
0000ef d00e      	rcall STOP_ALL
0000f0 e400      	ldi GENI1,	(1<<INT0)
0000f1 bf0b      	out GICR,	GENI1	
                 	;rjmp amode1	
                 
                 writeT1NVR:
0000f2 2e31      	mov		T1NVR,	GENI2
0000f3 c006      	rjmp	INT_PREP_EX
                 
                 writeT2NVR:
0000f4 2e41      	mov		T2NVR,	GENI2
0000f5 c004      	rjmp	INT_PREP_EX
                 
                 INCORRECT_CHECKSUM:					;Ошибка - контрольная сумма не совпала
0000f6 e003      	ldi		GENI1,		3
0000f7 c002      	rjmp	UR1_EXIT
                 NOT_HEADER:							;Ошибка - переданный байт не заголовок
0000f8 e000      	ldi		GENI1,		0
0000f9 c000      	rjmp	UR1_EXIT
                 INT_PREP_EX:
                 UR1_EXIT:
0000fa 9b5d      	sbis	UCSRA,		UDRE
0000fb cffc      	rjmp	NOT_HEADER
0000fc b90c      	out		udr,		GENI1
0000fd 9518      reti
                 
                 
                 
                 ;Выключает все таймеры, и АЦП
                 ;***********************************
                 STOP_ALL:
0000fe e040      	ldi GENR1,0
0000ff bf43      	out TCCR0,GENR1
000100 bd4f      	out TCCR1A,GENR1
000101 bd4e      	out TCCR1B,GENR1
000102 bd45      	out TCCR2, GENR1
000103 b947      	out ADMUX,GENR1
000104 b946      	out ADCSRA,GENR1
000105 bf49      	out TIMSK,GENR1
000106 9508      ret
                 ;***********************************
                 
                 ;Загрузка массива синусоиды в ОЗУ
                 ;***********************************
                 LOAD_ARRAY:
000107 e040      	ldi		GENR1,	0
000108 e0c0      	ldi		YL,		LOW(asin)
000109 e0d1      	ldi		YH,		HIGH(asin)
00010a e1e8      	ldi		ZL,		LOW(SINAR*2)	;Считываем адрес массива значений синусоиды
00010b e0f0      	ldi		ZH,		HIGH(SINAR*2)
00010c e440      	ldi		GENR1,	ARRAY_SIZE
                 laloop:
00010d 9155      	lpm		GENR2,	Z+
00010e 9359      	st		Y+,		GENR2
00010f 954a      	dec		GENR1
000110 1142      	cpse	GENR1,	NULL
000111 cffb      	rjmp	laloop
                 laex:
000112 e0d1      	ldi		YH,		1
000113 e0c0      	ldi		Yl,		0
000114 e0b1      	ldi		XH,		1
000115 e0a0      	ldi		Xl,		0
000116 9508      ret
                 ;***********************************
                 
                 ;Чистит стэк
                 ;***********************************
                 clearStack:		;Чистит стек, адрес возврата сует в R0, а затем пихает его в стек(для того чтобы сработал ret)
000117 94f8      	cli
000118 900f      	pop		R0
000119 901f      	pop		R1
00011a e50f      	ldi		R16,	low(RAMEND)		;Загрузка в регистр r16 адреса верхней границы ОЗУ
00011b bf0d      	out		SPL,	R16				;Копирование значения из r16 в регистр указателя стека SPL
00011c e004      	ldi		R16,	high(RAMEND)
00011d bf0e      	out		SPH,	R16
00011e 921f      	push	R1
00011f 920f      	push	R0
000120 9508      ret
                 ;***********************************
                 
                 ;Получает значение с АЦП, значение ADMUX должно быть в GENR1, результат будет в ADCH
                 ;***********************************
                 getADCSample:
000121 b947      	out		ADMUX,		GENR1															;Регистр управления мультиплексора на АЦП
000122 ec44      	ldi		GENR1,		(1<<ADEN) | (1<<ADSC)  |(1<<ADPS2)
000123 b946      	out		ADCSRA,		GENR1															;Регистр управления АЦП;
                 gas1:
000124 9936      	sbic	ADCSRA,		ADSC
000125 cffe      	rjmp	gas1
000126 9508      ret
                 ;***********************************
                 
                 ;Меняет адрес прерывания TIMER_1_COMP_A, новый адрес берется из регистра Z
                 ;***********************************
                 setTimer1COMPAVect:
000127 93e0 0064 	sts		TIMER_1_COMP_A_vect,	ZL
000129 93f0 0065 	sts		TIMER_1_COMP_A_vect+1,	ZH
00012b 9508      ret
                 ;***********************************
                 
                 .dseg
000060           uartBuf:				.byte 4				;Буфер: заголовок, номер команды, параметр, контрольная сумма
000064           TIMER_1_COMP_A_vect:	.byte 2				;Указатель на начало прерывания
000066           MODE_START_VECT:		.byte 2				;Указатель на начало режима
000068           PM_POINTER:				.byte 1	
                 
                 
                 .org  0x100		;После такого, ZH обязательно в 1  !!!!!!!!!!!
000100           aSIN: .byte ARRAY_SIZE


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8" register use summary:
r0 :   2 r1 :   6 r2 :   4 r3 :   5 r4 :   2 r5 :   7 r6 :   2 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  50 r17:  26 r18:   4 r19:   7 r20:  43 r21:  22 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   6 r27:   4 r28:   8 r29:   2 r30:   4 r31:   4 
x  :   2 y  :   4 z  :   1 
Registers used: 24 out of 35 (68.6%)

"ATmega8" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   5 adiw  :   0 and   :   1 
andi  :   7 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 breq  :   6 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   5 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :   2 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   1 cpc   :   0 cpi   :  10 cpse  :   1 
dec   :   1 eor   :   2 fmul  :   2 fmuls :   0 fmulsu:   1 icall :   0 
ijmp  :   1 in    :   4 inc   :   3 ld    :   4 ldd   :   0 ldi   :  50 
lds   :   6 lpm   :   1 lsl   :   1 lsr   :   4 mov   :  13 movw  :   0 
mul   :   0 muls  :   0 mulsu :   1 neg   :   0 nop   :   0 or    :   2 
ori   :   1 out   :  43 pop   :   5 push  :   5 rcall :   8 ret   :   6 
reti  :   5 rjmp  :  29 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   1 sbis  :   3 sbiw  :   0 sbr   :   0 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :   4 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 42 out of 110 (38.2%)

"ATmega8" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000258    524     64    588    8192   7.2%
[.dseg] 0x000060 0x000140      0     73     73    1024   7.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
